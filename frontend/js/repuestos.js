const API_URL = "http://localhost:5000/api/repuestos";

const tabla = document.getElementById("tablaRepuestos").querySelector("tbody");
const modal = document.getElementById("modalRepuesto");
const form = document.getElementById("formRepuesto");
const btnAgregar = document.getElementById("btnAgregar");
const btnCancelar = document.getElementById("btnCancelar");
const modalTitulo = document.getElementById("modalTitulo");
const logoutBtn = document.getElementById("logoutBtn");

let editando = false;
let idActual = null;

// üîÑ Cargar repuestos - VERSI√ìN CORREGIDA
async function cargarRepuestos() {
  try {
    console.log("üîÑ Cargando repuestos...");
    
    const res = await fetch("http://localhost:5000/api/repuestos/all");
    if (!res.ok) throw new Error("Error al obtener los repuestos");
    const data = await res.json();

    console.log("‚úÖ Repuestos cargados:", data);

    tabla.innerHTML = "";
    
    if (data.length === 0) {
      tabla.innerHTML = `
        <tr>
          <td colspan="5" style="text-align: center; color: #666;">
            No hay repuestos registrados. ¬°Agrega el primero!
          </td>
        </tr>
      `;
      return;
    }

    data.forEach(rep => {
      const repuestoId = rep.id || rep._id;
      console.log(`üîß Creando fila para repuesto: ${rep.codigo} con ID: ${repuestoId}`);
      
      const fila = document.createElement("tr");
      fila.innerHTML = `
        <td>${rep.codigo || rep.nombre || 'N/A'}</td>
        <td>${rep.descripcion || 'Sin descripci√≥n'}</td>
        <td>$${(rep.precioUnitario || rep.precio || 0).toFixed(2)}</td>
        <td class="${(rep.cantidadStock || rep.cantidad || 0) <= 5 ? 'stock-bajo' : 'stock-normal'}">
          ${rep.cantidadStock || rep.cantidad || 0}
        </td>
        <td class="acciones">
          <button class="btn-editar" onclick="editarRepuesto('${repuestoId}')" title="Editar repuesto">
            <i class="fas fa-edit"></i> Editar
          </button>
          <button class="btn-eliminar" onclick="eliminarRepuesto('${repuestoId}')" title="Eliminar repuesto">
            <i class="fas fa-trash"></i> Eliminar
          </button>
        </td>
      `;
      tabla.appendChild(fila);
    });
    
    console.log("‚úÖ Tabla de repuestos cargada correctamente");
    
  } catch (error) {
    console.error("‚ùå Error cargando repuestos:", error);
    tabla.innerHTML = `
      <tr>
        <td colspan="5" style="text-align: center; color: red;">
          Error al cargar repuestos: ${error.message}
        </td>
      </tr>
    `;
  }
}

// ‚ûï Abrir modal nuevo - MEJORADO
btnAgregar.addEventListener("click", () => {
  console.log("‚ûï Abriendo modal para nuevo repuesto");
  
  form.reset();
  editando = false;
  idActual = null;
  modalTitulo.textContent = "Agregar Repuesto";
  modal.classList.remove("hidden");
});

// ‚ùå Cancelar modal
btnCancelar.addEventListener("click", () => {
  console.log("‚ùå Cerrando modal");
  modal.classList.add("hidden");
});

// üíæ Guardar repuesto - MEJORADO
form.addEventListener("submit", async (e) => {
  e.preventDefault();

  const repuesto = {
    codigo: document.getElementById("codigo").value.trim(),
    descripcion: document.getElementById("descripcion").value.trim(),
    precioUnitario: parseFloat(document.getElementById("precioUnitario").value),
    cantidadStock: parseInt(document.getElementById("cantidadStock").value)
  };

  console.log("üíæ Guardando repuesto:", repuesto);

  // Validaciones b√°sicas
  if (!repuesto.codigo || !repuesto.descripcion) {
    alert("‚ùå El c√≥digo y descripci√≥n son obligatorios");
    return;
  }

  if (repuesto.precioUnitario <= 0 || repuesto.cantidadStock < 0) {
    alert("‚ùå El precio debe ser mayor a 0 y la cantidad no puede ser negativa");
    return;
  }

  try {
    const url = editando ? `${API_URL}/${idActual}` : API_URL;
    const method = editando ? "PUT" : "POST";

    console.log(`üì§ Enviando ${method} a:`, url);

    const res = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(repuesto)
    });

    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(errorText || "Error al guardar repuesto");
    }

    await cargarRepuestos();
    modal.classList.add("hidden");
    alert(editando ? "‚úÖ Repuesto actualizado correctamente" : "‚úÖ Repuesto creado correctamente");
    
  } catch (error) {
    console.error("‚ùå Error guardando repuesto:", error);
    alert("‚ùå Error: " + error.message);
  }
});

// ‚úèÔ∏è Editar repuesto - VERSI√ìN CORREGIDA
async function editarRepuesto(id) {
  try {
    console.log("‚úèÔ∏è Solicitando edici√≥n del repuesto ID:", id);
    
    const res = await fetch(`${API_URL}/${id}`);
    
    if (!res.ok) throw new Error("No se encontr√≥ el repuesto");
    const rep = await res.json();

    console.log("üì• Repuesto cargado para editar:", rep);

    // üîß CORRECCI√ìN: Usar el ID correcto
    idActual = rep.id || rep._id;
    editando = true;
    modalTitulo.textContent = "Editar Repuesto";

    // üîß CORRECCI√ìN: Asignar valores correctamente
    document.getElementById("codigo").value = rep.codigo || "";
    document.getElementById("descripcion").value = rep.descripcion || "";
    document.getElementById("precioUnitario").value = rep.precioUnitario || rep.precio || "";
    document.getElementById("cantidadStock").value = rep.cantidadStock || rep.cantidad || "";

    modal.classList.remove("hidden");
    console.log("‚úÖ Modal de edici√≥n abierto correctamente");
    
  } catch (error) {
    console.error("‚ùå Error editando repuesto:", error);
    alert("‚ùå Error al cargar repuesto para editar: " + error.message);
  }
}

// üóëÔ∏è Eliminar repuesto - MEJORADO
async function eliminarRepuesto(id) {
  if (!confirm("¬øSeguro que deseas eliminar este repuesto?")) return;
  
  try {
    console.log("üóëÔ∏è Eliminando repuesto ID:", id);
    
    const res = await fetch(`${API_URL}/${id}`, { method: "DELETE" });
    if (!res.ok) throw new Error("Error al eliminar repuesto");
    
    await cargarRepuestos();
    alert("‚úÖ Repuesto eliminado correctamente");
    
  } catch (error) {
    console.error("‚ùå Error eliminando repuesto:", error);
    alert("‚ùå Error al eliminar repuesto");
  }
}

// üö™ Cerrar sesi√≥n
logoutBtn.addEventListener("click", () => {
  console.log("üö™ Cerrando sesi√≥n...");
  localStorage.clear();
  window.location.href = "login.html";
});

// üöÄ Inicializaci√≥n
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ Inicializando p√°gina de repuestos...");
  cargarRepuestos();
});