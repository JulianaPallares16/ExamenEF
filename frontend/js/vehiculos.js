const VEHICULOS_API = "http://localhost:5000/api/vehiculos";
const CLIENTES_API = "http://localhost:5000/api/clientes/all"; // üîß Nueva URL para clientes
const MODELOS_API = "http://localhost:5000/api/modelos/all";   // üîß Nueva URL para modelos

// Referencias del DOM
const modal = document.getElementById("modalVehiculo");
const nuevoVehiculoBtn = document.getElementById("nuevoVehiculoBtn");
const cancelarBtn = document.getElementById("cancelarBtn");
const vehiculoForm = document.getElementById("vehiculoForm");
const vehiculosTableBody = document.getElementById("vehiculosTableBody");
const logoutBtn = document.getElementById("logoutBtn");

// Mostrar modal
nuevoVehiculoBtn.addEventListener("click", () => {
  modal.classList.remove("hidden");
  console.log("üìù Abriendo modal para nuevo veh√≠culo");
});

// Cerrar modal
cancelarBtn.addEventListener("click", () => {
  modal.classList.add("hidden");
  console.log("‚ùå Modal cerrado");
});

// Cargar veh√≠culos
async function cargarVehiculos() {
  try {
    console.log("üîÑ Cargando veh√≠culos...");
    const res = await fetch("http://localhost:5000/api/vehiculos/all");
    
    if (!res.ok) {
      throw new Error(`Error ${res.status}: ${res.statusText}`);
    }
    
    const data = await res.json();
    console.log("üöó Veh√≠culos cargados:", data);

    vehiculosTableBody.innerHTML = "";
    
    if (data.length === 0) {
      vehiculosTableBody.innerHTML = `
        <tr>
          <td colspan="7" style="text-align: center; color: #666;">
            No hay veh√≠culos registrados. ¬°Agrega el primero!
          </td>
        </tr>
      `;
      return;
    }

    data.forEach(v => {
      const fila = document.createElement("tr");
      fila.innerHTML = `
        <td>${v.id || 'N/A'}</td>
        <td>${v.a√±o || 'N/A'}</td>
        <td>${v.numeroSerie || 'N/A'}</td>
        <td>${v.kilometraje || 0} km</td>
        <td>${v.cliente?.nombre || v.clienteId || '‚Äî'}</td>
        <td>${v.modelo?.nombre || v.modeloId || '‚Äî'}</td>
        <td>
          <button class="btn-editar" onclick="editarVehiculo('${v.id}')" title="Editar veh√≠culo">
            <i class="fas fa-edit"></i> Editar
          </button>
          <button class="btn-eliminar" onclick="eliminarVehiculo('${v.id}')" title="Eliminar veh√≠culo">
            <i class="fas fa-trash"></i> Eliminar
          </button>
        </td>
      `;
      vehiculosTableBody.appendChild(fila);
    });
  } catch (error) {
    console.error("‚ùå Error cargando veh√≠culos:", error);
    vehiculosTableBody.innerHTML = `
      <tr>
        <td colspan="7" style="text-align: center; color: red;">
          Error al cargar veh√≠culos: ${error.message}
        </td>
      </tr>
    `;
  }
}

// Cargar clientes
async function cargarClientes() {
  try {
    console.log("üîÑ Cargando clientes...");
    const res = await fetch(CLIENTES_API);
    
    if (!res.ok) {
      throw new Error(`Error ${res.status}: ${res.statusText}`);
    }
    
    const clientes = await res.json();
    const select = document.getElementById("cliente");

    console.log("üë• Clientes cargados:", clientes);

    // Limpiar select excepto la primera opci√≥n
    select.innerHTML = '<option value="">Seleccione un cliente</option>';
    
    clientes.forEach(c => {
      const option = document.createElement("option");
      option.value = c.id;
      option.textContent = `${c.nombre} - ${c.telefono}`; // Mostrar nombre y tel√©fono
      select.appendChild(option);
    });
  } catch (error) {
    console.error("‚ùå Error cargando clientes:", error);
    const select = document.getElementById("cliente");
    select.innerHTML = '<option value="">Error al cargar clientes</option>';
  }
}

// Cargar modelos
async function cargarModelos() {
  try {
    console.log("üîÑ Cargando modelos...");
    const res = await fetch(MODELOS_API);
    
    if (!res.ok) {
      throw new Error(`Error ${res.status}: ${res.statusText}`);
    }
    
    const modelos = await res.json();
    const select = document.getElementById("modelo");

    console.log("üöô Modelos cargados:", modelos);

    // Limpiar select excepto la primera opci√≥n
    select.innerHTML = '<option value="">Seleccione un modelo</option>';
    
    modelos.forEach(m => {
      const option = document.createElement("option");
      option.value = m.id;
      option.textContent = m.nombre;
      select.appendChild(option);
    });
  } catch (error) {
    console.error("‚ùå Error cargando modelos:", error);
    const select = document.getElementById("modelo");
    select.innerHTML = '<option value="">Error al cargar modelos</option>';
  }
}

// Guardar nuevo veh√≠culo
vehiculoForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  console.log("üíæ Guardando nuevo veh√≠culo...");

  const nuevoVehiculo = {
    a√±o: parseInt(document.getElementById("a√±o").value),
    numeroSerie: document.getElementById("numeroSerie").value.trim(),
    kilometraje: parseInt(document.getElementById("kilometraje").value),
    clienteId: document.getElementById("cliente").value,
    modeloId: document.getElementById("modelo").value
  };

  console.log("üì¶ Datos del veh√≠culo:", nuevoVehiculo);

  // Validaciones
  if (!nuevoVehiculo.clienteId || !nuevoVehiculo.modeloId) {
    alert("‚ùå Por favor selecciona un cliente y un modelo");
    return;
  }

  if (nuevoVehiculo.a√±o < 1900 || nuevoVehiculo.a√±o > new Date().getFullYear() + 1) {
    alert("‚ùå El a√±o debe ser v√°lido");
    return;
  }

  try {
    const res = await fetch(VEHICULOS_API, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(nuevoVehiculo)
    });

    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(errorText || "Error al guardar veh√≠culo");
    }

    const resultado = await res.json();
    console.log("‚úÖ Veh√≠culo guardado:", resultado);

    modal.classList.add("hidden");
    vehiculoForm.reset();
    
    // Recargar la lista
    await cargarVehiculos();
    
    alert("‚úÖ Veh√≠culo registrado correctamente");
    
  } catch (error) {
    console.error("‚ùå Error guardando veh√≠culo:", error);
    alert("‚ùå Error: " + error.message);
  }
});

// Editar veh√≠culo (funci√≥n b√°sica - puedes expandirla)
async function editarVehiculo(id) {
  try {
    console.log("‚úèÔ∏è Editando veh√≠culo:", id);
    
    // Cargar datos del veh√≠culo
    const res = await fetch(`${VEHICULOS_API}/${id}`);
    if (!res.ok) throw new Error("No se encontr√≥ el veh√≠culo");
    
    const vehiculo = await res.json();
    console.log("üìã Veh√≠culo a editar:", vehiculo);

    // Llenar el formulario con los datos existentes
    document.getElementById("a√±o").value = vehiculo.a√±o || "";
    document.getElementById("numeroSerie").value = vehiculo.numeroSerie || "";
    document.getElementById("kilometraje").value = vehiculo.kilometraje || "";
    
    // Establecer cliente y modelo (necesitar√≠as guardar el ID actual para edici√≥n)
    // Esto es m√°s complejo y requerir√≠a modificar el formulario para manejar edici√≥n
    
    alert("‚úèÔ∏è Funcionalidad de edici√≥n en desarrollo. Veh√≠culo: " + vehiculo.numeroSerie);
    
  } catch (error) {
    console.error("‚ùå Error editando veh√≠culo:", error);
    alert("‚ùå Error al cargar veh√≠culo para editar: " + error.message);
  }
}

// Eliminar veh√≠culo
async function eliminarVehiculo(id) {
  if (!confirm("¬øSeguro que deseas eliminar este veh√≠culo?")) return;
  
  try {
    console.log("üóëÔ∏è Eliminando veh√≠culo:", id);
    const res = await fetch(`${VEHICULOS_API}/${id}`, { method: "DELETE" });
    
    if (!res.ok) {
      throw new Error("Error al eliminar veh√≠culo");
    }
    
    await cargarVehiculos();
    alert("‚úÖ Veh√≠culo eliminado correctamente");
  } catch (error) {
    console.error("‚ùå Error eliminando veh√≠culo:", error);
    alert("‚ùå Error al eliminar veh√≠culo");
  }
}

// Cerrar sesi√≥n
logoutBtn.addEventListener("click", () => {
  localStorage.clear();
  window.location.href = "login.html";
});

// Inicializaci√≥n
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ Inicializando m√≥dulo de veh√≠culos...");
  cargarVehiculos();
  cargarClientes();
  cargarModelos();
});